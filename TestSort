package interviewed.sort;

public class TestSort {

	// 冒泡排序
	// 分类 -------------- 内部比较排序
	// 数据结构 ---------- 数组
	// 最差时间复杂度 ---- O(n^2)
	// 最优时间复杂度 ---- 如果能在内部循环第一次运行时,使用一个旗标来表示有无需要交换的可能,可以把最优时间复杂度降低到O(n)
	// 平均时间复杂度 ---- O(n^2)
	// 所需辅助空间 ------ O(1)
	// 稳定性 ------------ 稳定
	public static int[] bubbleSrot(int[] orign) {
		int lenght = orign.length;
		for (int i = 0; i < lenght; i++) {
			for (int j = 0; j < lenght - i - 1; j++) {
				if (orign[j] > orign[j + 1]) {
					int temp = orign[j];
					orign[j] = orign[j + 1];
					orign[j + 1] = temp;
				}
			}
			print(orign);
		}
		return orign;
	}

	public static int[] bubbleSrot_1(int[] orign) {
		boolean exchanged = true;
		int lenght = orign.length;
		for (int i = 0; i < lenght && exchanged; i++) {
			exchanged = false;
			for (int j = 0; j < lenght - i - 1; j++) {
				if (orign[j] > orign[j + 1]) {
					int temp = orign[j];
					orign[j] = orign[j + 1];
					orign[j + 1] = temp;
					exchanged = true;
				}
			}
			print(orign);
		}
		return orign;
	}

	public static int[] bubbleSrot_2(int[] orign) {
		int low = 0;
		int high = orign.length - 1; // 设置变量的初始值
		int tmp, j;
		while (low < high) {
			for (j = low; j < high; ++j) // 正向冒泡,找到最大者
				if (orign[j] > orign[j + 1]) {
					tmp = orign[j];
					orign[j] = orign[j + 1];
					orign[j + 1] = tmp;
				}
			--high; // 修改high值, 前移一位
			for (j = high; j > low; --j) // 反向冒泡,找到最小者
				if (orign[j] < orign[j - 1]) {
					tmp = orign[j];
					orign[j] = orign[j - 1];
					orign[j - 1] = tmp;
				}
			++low; // 修改low值,后移一位
		}
		return orign;
	}

	// 选择排序
	// 分类 -------------- 内部比较排序
	// 数据结构 ---------- 数组
	// 最差时间复杂度 ---- O(n^2)
	// 最优时间复杂度 ---- O(n^2)
	// 平均时间复杂度 ---- O(n^2)
	// 所需辅助空间 ------ O(1)
	// 稳定性 ------------ 不稳定
	public static int[] selectionSort(int[] orign) {
		int lenght = orign.length;
		for (int i = 0; i < lenght; i++) {
			int min = i;
			for (int j = i + 1; j < lenght; j++) {
				if (orign[j] < orign[min]) {
					min = j;
				}
			}
			if (i != min) {
				int temp = orign[min];
				orign[min] = orign[i];
				orign[i] = temp;
			}
		}
		return orign;
	}

	// 分类 -------------- 内部比较排序
	// 数据结构 ---------- 数组
	// 最差时间复杂度 ---- O(n^2)
	// 最优时间复杂度 ---- O(nlogn)
	// 平均时间复杂度 ---- O(n^2)
	// 所需辅助空间 ------ O(1)
	// 稳定性 ------------ 稳定
	// 二分插入排序
	public static int[] twoInsertionSort(int[] orign) {
		int lenght = orign.length;
		for (int i = 1; i < lenght; i++) {
			int temp = orign[i];
			int left = 0;
			int right = i - 1;
			while (left <= right) {
				int middle = (left + right) / 2;
				if (orign[middle] > temp) {
					right = middle - 1;
				} else {
					left = middle + 1;
				}
			}
			for (int j = i - 1; j >= left; j--) // 将欲插入新牌位置右边的牌整体向右移动一个单位
			{
				orign[j + 1] = orign[j];
			}

			orign[left] = temp;
		}
		return orign;
	}

	// 插入排序
	// 分类 ------------- 内部比较排序
	// 数据结构 ---------- 数组
	// 最差时间复杂度 ---- 最坏情况为输入序列是降序排列的,此时时间复杂度O(n^2)
	// 最优时间复杂度 ---- 最好情况为输入序列是升序排列的,此时时间复杂度O(n)
	// 平均时间复杂度 ---- O(n^2)
	// 所需辅助空间 ------ O(1)
	// 稳定性 ------------ 稳定
	public static int[] insertionSort(int[] orign) {
		int lenght = orign.length;
		for (int i = 1; i < lenght; i++) {
			int temp = orign[i];
			int j = i - 1;
			while (j >= 0 && orign[j] > temp) {
				orign[j + 1] = orign[j];
				j--;
			}

			orign[j + 1] = temp;
		}
		return orign;
	}

	// 希尔排序
	// 分类 -------------- 内部比较排序
	// 数据结构 ---------- 数组
	// 最差时间复杂度 ---- 根据步长序列的不同而不同。已知最好的为O(n(logn)^2)
	// 最优时间复杂度 ---- O(n)
	// 平均时间复杂度 ---- 根据步长序列的不同而不同。
	// 所需辅助空间 ------ O(1)
	// 稳定性 ------------ 不稳定
	public static int[] shellSort(int[] orign, int step) {
		int length = orign.length;
		int h = 1;
		if (step <= 1) {
			// 根据数组长度 选取适当的初始间隔h
			while (h < length / 3)
				h = 3 * h + 1; // 1,4,13,40,121,364,1093....
		}

		while (h >= 1) {
			for (int i = h; i < length; i++) {
				for (int j = i - h; j + h < length; j = j + h) {
					if (orign[j] > orign[j + h]) {
						int temp = orign[j + h];
						orign[j + h] = orign[j];
						orign[j] = temp;
					}
				}
			}
			h = h / 3;
		}

		return orign;
	}

	// 归并排序
	// 分类 -------------- 内部比较排序
	// 数据结构 ---------- 数组
	// 最差时间复杂度 ---- O(nlogn)
	// 最优时间复杂度 ---- O(nlogn)
	// 平均时间复杂度 ---- O(nlogn)
	// 所需辅助空间 ------ O(n)
	// 稳定性 ------------ 稳定

	// 递归实现的归并排序(自顶向下)
	public static int[] mergesort_recursion(int[] orign, int left, int right) {
		int middle = (left + right) / 2;
		if (left < right) {
			mergesort_recursion(orign, left, middle);
			mergesort_recursion(orign, middle + 1, right);
			merge(orign, left, middle, right);
		}
		return orign;
	}

	// 非递归(迭代)实现的归并排序(自底向上)
	// 7, 5, 8, 9, 1, 3, 6, 10, 2
	public static int[] mergesort_iteration(int[] orign, int left, int right) {
		int length = right - left + 1;
		for (int size = 1; size < length; size = size * 2) {
			for (int start = left; start <= right - size; start = start + size + 1) {
				int end = start + size;
				if (end > right) {
					end = right;
				}
				merge(orign, start, (start + end) / 2, end);
				// System.out.println("start+"+start+"********end"+end);
				// print(orign);
			}
		}
		return orign;
	}

	public static int[] merge(int[] orign, int left, int middle, int right) {
		int n1 = middle - left + 1;
		int n2 = right - middle;
		int[] l = new int[n1];
		for (int i = 0; i < n1; i++) {
			l[i] = orign[left + i];
		}
		int[] r = new int[n2];
		for (int i = 0; i < n2; i++) {
			r[i] = orign[middle + i + 1];
		}
		int i = 0, j = 0, k = left;
		for (; k < right && i < n1 && j < n2; k++) {
			if (l[i] < r[j]) {
				orign[k] = l[i];
				i++;
			} else {
				orign[k] = r[j];
				j++;
			}
		}
		while (i < n1) {
			orign[k++] = l[i++];
		}
		while (j < n2) {
			orign[k++] = r[j++];
		}
		return orign;
	}

	// 分类 -------------- 内部比较排序
	// 数据结构 ---------- 数组
	// 最差时间复杂度 ---- O(nlogn)
	// 最优时间复杂度 ---- O(nlogn)
	// 平均时间复杂度 ---- O(nlogn)
	// 所需辅助空间 ------ O(1)
	// 稳定性 ------------ 不稳定
	public static void heapSort(int orign[]) {
		buildheap(orign);
		int length = orign.length;
		for (int i = length - 1; i >= 1; i--) {
			exchange(orign, 0, i); // 将堆顶元素(当前最大值)与堆的最后一个元素互换(该操作很有可能把后面元素的稳定性打乱,所以堆排序是不稳定的排序算法)
			length--; // 从堆中去掉最后一个元素
			heapify(orign, 0, length); // 从新的堆顶元素开始进行堆调整
		}
	}

	// 交换A[i]和A[j]
	private static void exchange(int orign[], int i, int j) {
		int temp = orign[i];
		orign[i] = orign[j];
		orign[j] = temp;
	}

	private static void heapify(int orign[], int i, int length) {
		int left = 2 * i + 1;
		int right = 2 * i + 2;
		int largest;
		if (left < length && orign[i] < orign[left]) {
			largest = left;
		} else {
			largest = i;
		}
		if (right < length && orign[largest] < orign[right]) {
			largest = right;
		}
		if (largest != i) {
			exchange(orign, i, largest);
			heapify(orign, largest, length);
		}
	}

	// 建堆函数
	private static void buildheap(int orign[]) {
		int length = orign.length;
		for (int i = length / 2 - 1; i >= 0; i--) // 对每一个非叶结点
			heapify(orign, i, length); // 不断的堆调整
	}

	// 分类 ------------ 内部比较排序
	// 数据结构 --------- 数组
	// 最差时间复杂度 ----
	// 每次选取的基准都是最大的元素（或者每次都是最小），导致每次只划分出了一个子序列，需要进行n-1次划分才能结束递归，时间复杂度为O(n^2)
	// 最优时间复杂度 ---- 每次选取的基准都能使划分均匀，只需要logn次划分就能结束递归，时间复杂度为O(nlogn)
	// 平均时间复杂度 ---- O(nlogn)
	// 所需辅助空间 ------ O(logn)～O(n),主要是递归造成的栈空间的使用(用来保存left和right等局部变量),取决于递归树的深度
	// 一般为O(logn),最差为O(n)（基本有序的情况）
	// 稳定性 ---------- 不稳定
	public static void quickSort(int[] orign, int left, int right) {
		int pivot_index; // 基准的索引
		if (left < right) {
			pivot_index = partition(orign, left, right);
			quickSort(orign, left, pivot_index - 1);
			quickSort(orign, pivot_index + 1, right);
		}
	}

	// 划分函数
	private static int partition(int orign[], int left, int right) {
		// 选择最后一个元素作为基准
		int pivot = orign[right];
		// tail为小于基准的子数组最后一个元素的索引
		int tail = left - 1;
		// 遍历基准以外的其他元素
		for (int i = left; i < right; i++) {// 把小于等于基准的元素放到前一个子数组中
			if (orign[i] <= pivot) {
				tail++;
				exchange(orign, tail, i);
			}
		}
		// 最后把基准放到前一个子数组的后边,剩下的子数组既是大于基准的子数组
		exchange(orign, tail + 1, right);
		// 该操作很有可能把后面元素的稳定性打乱,所以快速排序是不稳定的排序算法
		// 返回基准的索引
		return tail + 1;
	}

	// 分类 -------------- 内部非比较排序
	// 数据结构 ---------- 数组
	// 最差时间复杂度 ---- O(n * dn)
	// 最差空间复杂度 ---- O(n * dn)
	public static void lsd_radixsort(int orign[],int max) {
		int length = orign.length;
		int temp[][] = new int[10][length];
		int order[] = new int[10];
		int n = 1;
		while(n<=max){
			for(int i=0;i<length;i++){
				int lsd = (orign[i]/n)%10;
				temp[lsd][order[lsd]] = orign[i];
				order[lsd] = order[lsd]+1;
			}
			// 重新排列  
	        int k = 0;  
	        for(int i = 0; i < 10; i++) {   
	            if(order[i] != 0)  {  
	                int j;  
	                for(j = 0; j < order[i]; j++, k++) {   
	                	orign[k] = temp[i][j];   
	                }   
	            }  
	            order[i] = 0;   
	        }   
			
			
			n = n*10;
		}
		
		
		
	}

	private static void print(int[] orign) {
		for (int i : orign) {
			System.out.println(i);
		}
	}

	public static void main(String[] args) {
		int[] test = new int[] { 7, 5, 8, 9, 1, 3, 6, 10, 2 };
		// print(bubbleSrot(test));
		// print(selectionSort(test));
		// print(insertionSort(test));
		// System.out.println(5/2);
		lsd_radixsort(test, 10);
		print(test);

	}
}
